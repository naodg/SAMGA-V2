import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// src/components/SignUp.tsx
import { useState } from "react";
import { auth, db } from "../../firebase";
import { createUserWithEmailAndPassword, sendEmailVerification } from "firebase/auth";
import { doc, setDoc, getDoc } from "firebase/firestore";
import "./SignUp.css";
import { useEffect } from "react";
import { getAuth, signInWithCustomToken } from "firebase/auth";
export default function SignUp() {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [nickname, setNickname] = useState("");
    const [phone, setPhone] = useState("");
    const [phoneError, setPhoneError] = useState("");
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");
    const validatePhone = (value) => {
        const phoneRegex = /^01[016789]-\d{3,4}-\d{4}$/;
        if (!phoneRegex.test(value)) {
            setPhoneError("Ï†ÑÌôîÎ≤àÌò∏ ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§. (Ïòà: 010-1234-5678)");
        }
        else {
            setPhoneError("");
        }
    };
    useEffect(() => {
        if (!window.Kakao.isInitialized()) {
            window.Kakao.init("d65716a4db9e8a93aaff1dfc09ee36b8"); // ‚Üê Ïã§Ï†ú ÌÇ§ ÎÑ£Ïñ¥Ï§ò
        }
    }, []);
    const handleSignUp = async (e) => {
        e.preventDefault();
        setError("");
        setSuccess("");
        // if (phoneError) {
        //     setError("Ï†ÑÌôîÎ≤àÌò∏ ÌòïÏãùÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
        //     return
        // }
        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const user = userCredential.user;
            await setDoc(doc(db, "users", user.uid), {
                email,
                nickname,
                phone,
                role: "user",
                createdAt: new Date()
            });
            await sendEmailVerification(user);
            setSuccess("ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! Ïù¥Î©îÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
            setEmail("");
            setPassword("");
            setNickname("");
            setPhone("");
        }
        catch (err) {
            if (err.code === "auth/email-already-in-use") {
                setError("Ïù¥ÎØ∏ Í∞ÄÏûÖÎêú Ïù¥Î©îÏùºÏûÖÎãàÎã§.");
            }
            else if (err.code === "auth/invalid-email") {
                setError("Ïù¥Î©îÏùº ÌòïÏãùÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§.");
            }
            else if (err.code === "auth/weak-password") {
                setError("ÎπÑÎ∞ÄÎ≤àÌò∏Îäî 6ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.");
            }
            else {
                setError("ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
            }
        }
    };
    const formatPhoneNumber = (value) => {
        const numbersOnly = value.replace(/\D/g, ""); // Ïà´ÏûêÎßå ÎÇ®ÍπÄ
        if (numbersOnly.length < 4)
            return numbersOnly;
        if (numbersOnly.length < 7) {
            return `${numbersOnly.slice(0, 3)}-${numbersOnly.slice(3)}`;
        }
        if (numbersOnly.length <= 11) {
            return `${numbersOnly.slice(0, 3)}-${numbersOnly.slice(3, 7)}-${numbersOnly.slice(7)}`;
        }
        return numbersOnly; // 11ÏûêÎ¶¨ ÎÑòÏúºÎ©¥ ÌïòÏù¥Ìîà ÏóÜÏù¥ Í∑∏ÎåÄÎ°ú
    };
    const handleKakaoLogin = () => {
        window.Kakao.Auth.login({
            success: async () => {
                try {
                    const res = await window.Kakao.API.request({ url: "/v2/user/me" });
                    const kakaoId = res.id;
                    const email = res.kakao_account.email || "";
                    const nickname = res.kakao_account.profile.nickname || "Ïπ¥Ïπ¥Ïò§Ïú†Ï†Ä";
                    // üî• 1. ÏÑúÎ≤ÑÏóêÏÑú Firebase Custom Token Î∞úÍ∏â (ÏòàÏõê Functions Í∏∞Ï§Ä)
                    const firebaseToken = await fetch(`/api/kakao-login?uid=${kakaoId}`).then(res => res.text());
                    // üî• 2. Firebase Î°úÍ∑∏Ïù∏
                    const auth = getAuth();
                    await signInWithCustomToken(auth, firebaseToken);
                    const user = auth.currentUser;
                    if (!user) {
                        alert("Firebase Î°úÍ∑∏Ïù∏ Ïã§Ìå®");
                        return;
                    }
                    // üî• 3. FirestoreÏóê ÌöåÏõê Ï†ïÎ≥¥ Ï†ÄÏû•
                    const userRef = doc(db, "users", user.uid);
                    const userSnap = await getDoc(userRef);
                    if (!userSnap.exists()) {
                        await setDoc(userRef, {
                            email,
                            nickname,
                            phone: "", // Ïπ¥Ïπ¥Ïò§Îäî Ï†ÑÌôîÎ≤àÌò∏ Ïïà Ï§òÏÑú ÎπÑÏõåÎë†
                            role: "user",
                            createdAt: new Date()
                        });
                    }
                    alert(`${nickname}Îãò, Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ ÏôÑÎ£å!`);
                }
                catch (err) {
                    console.error("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:", err);
                    alert("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ï§ë Ïò§Î•ò Î∞úÏÉù");
                }
            },
            fail: (err) => {
                console.error("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:", err);
                alert("Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏñ¥Ïöî.");
            }
        });
    };
    return (_jsx("div", { className: "signup-page", children: _jsxs("div", { className: "signup-wrapper", children: [_jsx("div", { className: "signup-text", children: "\uD68C\uC6D0\uAC00\uC785" }), _jsxs("form", { onSubmit: handleSignUp, children: [_jsx("input", { type: "text", placeholder: "\uBCF8\uC778 \uC774\uB984", value: nickname, onChange: (e) => setNickname(e.target.value), required: true }), _jsx("br", {}), _jsx("input", { type: "email", placeholder: "\uC774\uBA54\uC77C", value: email, onChange: (e) => setEmail(e.target.value), required: true }), _jsx("br", {}), _jsx("input", { type: "password", placeholder: "\uBE44\uBC00\uBC88\uD638", value: password, onChange: (e) => setPassword(e.target.value), required: true }), _jsx("br", {}), _jsx("input", { type: "text", placeholder: "\uC804\uD654\uBC88\uD638 - \uC81C\uC678\uD6C4 \uC785\uB825\uD574\uC8FC\uC138\uC694", value: phone, onChange: (e) => {
                                const formatted = formatPhoneNumber(e.target.value);
                                setPhone(formatted);
                                validatePhone(formatted);
                            }, required: true }), _jsx("br", {}), phoneError && _jsx("p", { style: { color: "red" }, children: phoneError }), _jsx("button", { type: "submit", children: "\uD68C\uC6D0\uAC00\uC785" })] }), error && _jsx("p", { style: { color: "red" }, children: error }), success && _jsx("p", { style: { color: "green" }, children: success })] }) }));
}
